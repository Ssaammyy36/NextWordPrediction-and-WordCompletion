server {
    # HTTP Port
    listen 80; # Port für eingehende HTTP-Anfragen
    server_name localhost; # Server-Name / Host
    # Hinweis: API-Weiterleitung wird normalerweise vom äußeren Reverse-Proxy
    # (z. B. Nginx Proxy Manager) übernommen. Alternativ kann der frontend-
    # nginx die /api-Aufrufe intern an den Backend-Container weiterleiten.
    # Im folgenden Block wird genau das umgesetzt (Frontend übernimmt API‑Proxy).

    # Leitet API-Aufrufe intern an den Backend-Container weiter
    # (Position vor `location /` ist wichtig)
    location /api/ {
        proxy_pass http://backend:5000/; # Docker-Compose Service-Name
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        # Falls WebSockets benötigt werden
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Stellt die statischen Dateien der React-App bereit
    # Stellt die statischen Dateien der React-App bereit
    location / {
        root /usr/share/nginx/html; # Pfad auf dem Server/Container, wo die gebuildeten Dateien liegen
        index index.html index.htm; # Standard-Dateien für Verzeichniszugriffe (z.B. bei '/' )
        # Wichtig für Single-Page-Applications (SPA) wie React:
        # Versucht zuerst, die echte Datei zu liefern ($uri, $uri/).
        # Falls nicht gefunden, wird /index.html zurückgegeben,
        # damit der client-seitige Router (React Router) die Route übernimmt.
        try_files $uri $uri/ /index.html;
    }
}